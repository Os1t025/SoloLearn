CREATE DATABASE IF NOT EXISTS SoloLearn;

USE SoloLearn;

CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL
);

CREATE TABLE user_progress (
    progress_id INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    lesson_id INT,
    completed BOOLEAN DEFAULT FALSE,
    quiz_score INT CHECK (quiz_score BETWEEN 0 AND 100),
    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id) REFERENCES users(id) ON DELETE CASCADE
);


CREATE TABLE courses (
    course_id INT PRIMARY KEY AUTO_INCREMENT,
    course_name VARCHAR(255) UNIQUE NOT NULL,
    description TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE lessons (
    lesson_id INT PRIMARY KEY AUTO_INCREMENT,
    course_id INT NOT NULL,  -- Ensure it matches the data type in courses
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    video_url VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_course FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE
);

CREATE TABLE community_posts (
    post_id SERIAL PRIMARY KEY,
    id INT REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE levels (
  level_id INT AUTO_INCREMENT PRIMARY KEY,
  level_name VARCHAR(100) NOT NULL,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE users 
ADD COLUMN points INT DEFAULT 0,
ADD COLUMN level INT DEFAULT 1,
ADD COLUMN role ENUM('User', 'Mentor', 'Leader') DEFAULT 'User';

CREATE TABLE points_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    points_earned INT,
    reason VARCHAR(255),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

ALTER TABLE user_progress ADD COLUMN points_awarded INT DEFAULT 0;
ALTER TABLE levels ADD COLUMN min_points INT NOT NULL;

INSERT INTO levels (level_name, description, min_points) VALUES 
('Beginner', 'New learner', 0),
('Intermediate', 'Getting the hang of it', 100),
('Advanced', 'Mastering the concepts', 500),
('Expert', 'Highly skilled in coding', 1000);

CREATE TABLE leaderboard (
    rank_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNIQUE,
    points INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

DELIMITER //
CREATE TRIGGER update_user_level 
AFTER UPDATE ON users
FOR EACH ROW
BEGIN
    DECLARE new_level INT;
    
    SELECT level_id INTO new_level 
    FROM levels 
    WHERE NEW.points >= min_points 
    ORDER BY min_points DESC 
    LIMIT 1;
    
    UPDATE users SET level = new_level WHERE id = NEW.id;
END;
//
DELIMITER ;


SELECT * FROM users;
